#!/bin/sh
# postinst script for udm-boot
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
       echo "Create udm-boot file structure"
       /sbin/ssh-proxy 'mkdir -p /mnt/data/udm-boot/on_boot.d'
       scp -P "$(cat /etc/unifi-os/ssh_proxy_port)" -o StrictHostKeyChecking=no -q /usr/share/udm-boot/host/* root@localhost:/mnt/data/udm-boot/
       /sbin/ssh-proxy 'chmod +x /mnt/data/udm-boot/on_boot.sh'
       /sbin/ssh-proxy 'chmod +x /mnt/data/udm-boot/build.sh'

       # build images
       echo "Build new images"
       /sbin/ssh-proxy "cd /mnt/data/udm-boot && ./build.sh" | sed 's/^/  /'

       # create containerA
       echo "Remove old container"
       /sbin/ssh-proxy "/usr/bin/podman container exists udm-boot && /usr/bin/podman rm --force --volumes udm-boot || true" | sed 's/^/  /'
       /sbin/ssh-proxy "[ -f /run/udm-boot.service-cid ] && rm -v /run/udm-boot.service-cid || true" | sed 's/^/  /'
       /sbin/ssh-proxy "[ -f /run/udm-boot.service-pid ] && rm -v /run/udm-boot.service-pid || true" | sed 's/^/  /'

       echo "Create new container"
       /sbin/ssh-proxy "/usr/bin/podman create --tty --conmon-pidfile /run/udm-boot.service-pid --cidfile /run/udm-boot.service-cid -d \
                                               --network=host \
                                               --privileged \
                                               --hostname=udm-boot \
                                               --name=udm-boot \
                                               --volume /sys/fs/cgroup:/sys/fs/cgroup:ro \
                                               localhost/udm-boot" | sed 's/^/  /'

       # cleanup and move old files
       echo "Cleanup and move old files"
       #/sbin/ssh-proxy "[ -d /mnt/data/on_boot.d ] && ([ -f "/mnt/data/on_boot.d/*" ] && mv -v /mnt/data/on_boot.d/* /mnt/data/udm-boot/on_boot.d/ || true && rmdir -v /mnt/data/on_boot.d) || true"  | sed 's/^/  /'
       #/sbin/ssh-proxy "[ -f /mnt/data/on_boot.sh ] && rm -v /mnt/data/on_boot.sh || true" | sed 's/^/  /'

       # enable and start udm-boot
       echo "Enable and start container"
       deb-systemd-invoke enable udm-boot.service || true
       deb-systemd-invoke start udm-boot.service || true

       echo ""
       echo ""
       echo "udm-boot container started on the udm."
       echo "some example commands to manage it from inside the unifi-os shell:"
       echo ""
       echo "  - systemctl start udm-boot"
       echo "  - systemctl stop udm-boot"
       echo "  - systemctl restart udm-boot"
       echo "  - systemctl status udm-boot"
       echo "  - ssh-proxy podman stop udm-boot"
       echo "  - ssh-proxy podman start udm-boot"
       echo "  - ssh-proxy podman restart udm-boot"
       echo "  - ssh-proxy podman ps -a -f name=udm-boot"
       echo "  - ssh-proxy podman logs udm-boot"
       echo "  - ssh-proxy podman exec -it udm-boot /bin/bash"
       echo ""


    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
